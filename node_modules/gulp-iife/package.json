{
  "name": "gulp-iife",
  "version": "0.3.0",
  "description": "Wraps JavaScript code within an immediately invoked function expression.",
  "license": "MIT",
  "main": "lib/index.js",
  "files": [
    "lib/"
  ],
  "scripts": {
    "prepublish": "npm test && gulp transpile",
    "test": "mocha test/transpiled",
    "test-watch": "mocha test/transpiled --watch"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mariusschulz/gulp-iife.git"
  },
  "keywords": [
    "gulpplugin",
    "javascript",
    "ecmascript",
    "js",
    "iife",
    "siaf",
    "immediately",
    "invoked",
    "function",
    "expression"
  ],
  "author": {
    "name": "Marius Schulz",
    "email": "marius.schulz@me.com",
    "url": "https://blog.mariusschulz.com/"
  },
  "homepage": "https://github.com/mariusschulz/gulp-iife",
  "dependencies": {
    "lodash": "^3.6.0",
    "source-map": "^0.5.3",
    "through2": "^2.0.0",
    "vinyl-sourcemaps-apply": "^0.2.1"
  },
  "devDependencies": {
    "babel": "^6.0.15",
    "babel-preset-es2015": "^6.0.15",
    "chai": "^3.2.0",
    "gulp": "^3.9.0",
    "gulp-babel": "^6.0.0",
    "mocha": "^2.3.0"
  },
  "readme": "# gulp-iife\r\n\r\nA Gulp plugin for wrapping JavaScript code within immediately invoked function expressions (IIFEs).\r\n\r\n\r\n## Install\r\n\r\n```\r\n$ npm install --save-dev gulp-iife\r\n```\r\n\r\n\r\n## Usage\r\n\r\n```js\r\nvar gulp = require(\"gulp\");\r\nvar iife = require(\"gulp-iife\");\r\n\r\ngulp.task(\"default\", function() {\r\n    return gulp.src(\"src/input.js\")\r\n        .pipe(iife())\r\n        .pipe(gulp.dest(\"dist\"));\r\n});\r\n```\r\n\r\nInput file:\r\n\r\n```js\r\nvar greeting = \"Hello, World!\";\r\nconsole.log(greeting);\r\n```\r\n\r\nOutput file:\r\n\r\n```js\r\n;(function() {\r\n\"use strict\";\r\n\r\nvar greeting = \"Hello, World!\";\r\nconsole.log(greeting);\r\n}());\r\n```\r\n\r\n\r\n## Options\r\n\r\nYou can configure the following options:\r\n\r\n- [`useStrict`](#usestrict)\r\n- [`trimCode`](#trimcode)\r\n- [`prependSemicolon`](#prependsemicolon)\r\n- [`bindThis`](#bindthis)\r\n- [`params`](#params)\r\n- [`args`](#args)\r\n\r\nHere's an example specifying all available options:\r\n\r\n```js\r\nvar gulp = require(\"gulp\");\r\nvar iife = require(\"gulp-iife\");\r\n\r\ngulp.task(\"default\", function() {\r\n    return gulp.src(\"src/input.js\")\r\n        .pipe(iife({\r\n            useStrict: true,\r\n            trimCode: true,\r\n            prependSemicolon: false,\r\n            bindThis: false,\r\n            params: [\"window\", \"document\", \"$\", \"undefined\"],\r\n            args: [\"window\", \"document\", \"jQuery\"]\r\n        }))\r\n        .pipe(gulp.dest(\"dist\"));\r\n});\r\n```\r\n\r\nInput file:\r\n\r\n```js\r\nvar greeting = \"Hello, World!\";\r\nconsole.log(greeting);\r\n```\r\n\r\nOutput file:\r\n\r\n```js\r\n(function(window, document, $, undefined) {\r\n\"use strict\";\r\n\r\nvar greeting = \"Hello, World!\";\r\nconsole.log(greeting);\r\n}(window, document, jQuery));\r\n```\r\n\r\n\r\n### `useStrict`\r\n\r\nA boolean indicating whether to prepend a `\"use strict\";` directive to the function body.\r\n\r\n- **Default**: `true`\r\n\r\n\r\n### `trimCode`\r\n\r\nA boolean indicating whether to remove leading & trailing whitespace from the code.\r\n\r\n- **Default**: `true`\r\n\r\n\r\n### `prependSemicolon`\r\n\r\nA boolean indicating whether to prepend a semicolon as statement terminator before the IIFE.\r\n\r\n- **Default**: `true`\r\n\r\n\r\n### `bindThis`\r\n\r\nA boolean indicating whether to append `.bind(this)` to the IIFE. Setting this value to `true` makes the surrounding global object available to the function, which is usually not the case in strict mode.\r\n\r\n- **Default**: `false`\r\n\r\n\r\n### `params`\r\n\r\nAn array of parameter names to be accepted by the IIFE. If the `args` option is not specified, the same identifiers will be passed as arguments of the function call.\r\n\r\n- **Default**: none\r\n\r\n\r\n### `args`\r\n\r\nAn array of argument names to be passed into the IIFE. If the `params` option is not specified, the parameters of the function will have the same names as the arguments passed.\r\n\r\n- **Default**: none\r\n\r\n\r\n## Source Maps\r\n\r\n*gulp-iife* supports source maps, which means you can use it like this:\r\n\r\n```js\r\nvar gulp = require(\"gulp\");\r\nvar iife = require(\"../gulp-iife/lib\");\r\nvar sourcemaps = require(\"gulp-sourcemaps\");\r\n\r\ngulp.task(\"default\", function() {\r\n    return gulp.src(\"src/input.js\")\r\n        .pipe(sourcemaps.init())\r\n        .pipe(iife({ }))\r\n        .pipe(sourcemaps.write(\"./\"))\r\n        .pipe(gulp.dest(\"./built\"));\r\n});\r\n```\r\n\r\n\r\n## Changelog\r\n\r\nThe changelog can be found in [CHANGELOG.md](https://github.com/mariusschulz/gulp-iife/blob/master/CHANGELOG.md).\r\n\r\n\r\n## Formatting\r\n\r\nIn the spirit of Gulp plugins, *gulp-iife* does one thing and one thing only: adding wrapping IIFEs.\r\n\r\nIf you'd like the resulting code to be neatly indented or otherwise formatted, pipe the output to another Gulp plugin which formats the JavaScript code, such as [gulp-esformatter](https://github.com/sindresorhus/gulp-esformatter).\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mariusschulz/gulp-iife/issues"
  },
  "_id": "gulp-iife@0.3.0",
  "dist": {
    "shasum": "e4564e34de3cf15302dc1ad52ff3964c95be145f"
  },
  "_from": "gulp-iife@",
  "_resolved": "https://registry.npmjs.org/gulp-iife/-/gulp-iife-0.3.0.tgz"
}
